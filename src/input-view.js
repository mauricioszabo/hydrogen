"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const utils_1 = require("./utils");
class InputView {
    constructor({ prompt, defaultText, allowCancel, password }, onConfirmed) {
        this.onConfirmed = onConfirmed;
        this.element = document.createElement("div");
        this.element.classList.add("hydron", "input-view");
        if (password) {
            this.element.classList.add("password");
        }
        const label = document.createElement("div");
        label.classList.add("label", "icon", "icon-arrow-right");
        label.textContent = prompt || "Kernel requires input";
        this.miniEditor = new atom_1.TextEditor({
            mini: true,
        });
        if (defaultText) {
            this.miniEditor.setText(defaultText);
        }
        this.element.appendChild(label);
        this.element.appendChild(this.miniEditor.element);
        if (allowCancel) {
            atom.commands.add(this.element, {
                "core:confirm": () => this.confirm(),
                "core:cancel": () => this.close(),
            });
            this.miniEditor.element.addEventListener("blur", () => {
                if (document.hasFocus()) {
                    this.close();
                }
            });
        }
        else {
            atom.commands.add(this.element, {
                "core:confirm": () => this.confirm(),
            });
        }
    }
    confirm() {
        const text = this.miniEditor.getText();
        if (this.onConfirmed) {
            this.onConfirmed(text);
        }
        this.close();
    }
    close() {
        if (this.panel) {
            this.panel.destroy();
        }
        this.panel = null;
        this.element.remove();
        if (this.previouslyFocusedElement) {
            this.previouslyFocusedElement.focus();
        }
    }
    attach() {
        (0, utils_1.setPreviouslyFocusedElement)(this);
        this.panel = atom.workspace.addModalPanel({
            item: this.element,
        });
        this.miniEditor.element.focus();
        this.miniEditor.scrollToCursorPosition();
    }
}
exports.default = InputView;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtdmlldy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL2xpYi9pbnB1dC12aWV3LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0JBQXlDO0FBQ3pDLG1DQUFzRDtBQVN0RCxNQUFxQixTQUFTO0lBTzVCLFlBQ0UsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQVEsRUFDcEQsV0FBZTtRQUVmLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO1FBQy9CLElBQUksQ0FBQyxPQUFPLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM3QyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQ3JELElBQUksUUFBUSxFQUFFO1lBQ1osSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQ3hDO1FBQ0QsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM1QyxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLGtCQUFrQixDQUFDLENBQUM7UUFDekQsS0FBSyxDQUFDLFdBQVcsR0FBRyxNQUFNLElBQUksdUJBQXVCLENBQUM7UUFDdEQsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLGlCQUFVLENBQUM7WUFDL0IsSUFBSSxFQUFFLElBQUk7U0FDWCxDQUFDLENBQUM7UUFDSCxJQUFJLFdBQVcsRUFBRTtZQUNmLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQ3RDO1FBQ0QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDaEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUVsRCxJQUFJLFdBQVcsRUFBRTtZQUNmLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUU7Z0JBQzlCLGNBQWMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFO2dCQUNwQyxhQUFhLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRTthQUNsQyxDQUFDLENBQUM7WUFDSCxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFO2dCQUNwRCxJQUFJLFFBQVEsQ0FBQyxRQUFRLEVBQUUsRUFBRTtvQkFDdkIsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO2lCQUNkO1lBQ0gsQ0FBQyxDQUFDLENBQUM7U0FDSjthQUFNO1lBQ0wsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRTtnQkFDOUIsY0FBYyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUU7YUFDckMsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDO0lBRUQsT0FBTztRQUNMLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDdkMsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ3BCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDeEI7UUFDRCxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDZixDQUFDO0lBRUQsS0FBSztRQUNILElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNkLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUM7U0FDdEI7UUFDRCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztRQUNsQixJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ3RCLElBQUksSUFBSSxDQUFDLHdCQUF3QixFQUFFO1lBQ2pDLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUN2QztJQUNILENBQUM7SUFFRCxNQUFNO1FBQ0osSUFBQSxtQ0FBMkIsRUFBQyxJQUFJLENBQUMsQ0FBQztRQUNsQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDO1lBQ3hDLElBQUksRUFBRSxJQUFJLENBQUMsT0FBTztTQUNuQixDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNoQyxJQUFJLENBQUMsVUFBVSxDQUFDLHNCQUFzQixFQUFFLENBQUM7SUFDM0MsQ0FBQztDQUNGO0FBekVELDRCQXlFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRleHRFZGl0b3IsIFBhbmVsIH0gZnJvbSBcImF0b21cIjtcbmltcG9ydCB7IHNldFByZXZpb3VzbHlGb2N1c2VkRWxlbWVudCB9IGZyb20gXCIuL3V0aWxzXCI7XG5cbnR5cGUgb3B0cyA9IHtcbiAgcHJvbXB0OiBzdHJpbmc7XG4gIGRlZmF1bHRUZXh0Pzogc3RyaW5nO1xuICBhbGxvd0NhbmNlbD86IGJvb2xlYW47XG4gIHBhc3N3b3JkPzogYm9vbGVhbjtcbn07XG50eXBlIGNiID0gKHM6IHN0cmluZykgPT4gdm9pZDtcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIElucHV0VmlldyB7XG4gIG9uQ29uZmlybWVkOiBjYjtcbiAgZWxlbWVudDogSFRNTEVsZW1lbnQ7XG4gIG1pbmlFZGl0b3I6IFRleHRFZGl0b3I7XG4gIHBhbmVsOiBQYW5lbCB8IG51bGwgfCB1bmRlZmluZWQ7XG4gIHByZXZpb3VzbHlGb2N1c2VkRWxlbWVudDogSFRNTEVsZW1lbnQgfCBudWxsIHwgdW5kZWZpbmVkO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHsgcHJvbXB0LCBkZWZhdWx0VGV4dCwgYWxsb3dDYW5jZWwsIHBhc3N3b3JkIH06IG9wdHMsXG4gICAgb25Db25maXJtZWQ6IGNiXG4gICkge1xuICAgIHRoaXMub25Db25maXJtZWQgPSBvbkNvbmZpcm1lZDtcbiAgICB0aGlzLmVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiaHlkcm9nZW5cIiwgXCJpbnB1dC12aWV3XCIpO1xuICAgIGlmIChwYXNzd29yZCkge1xuICAgICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJwYXNzd29yZFwiKTtcbiAgICB9XG4gICAgY29uc3QgbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGxhYmVsLmNsYXNzTGlzdC5hZGQoXCJsYWJlbFwiLCBcImljb25cIiwgXCJpY29uLWFycm93LXJpZ2h0XCIpO1xuICAgIGxhYmVsLnRleHRDb250ZW50ID0gcHJvbXB0IHx8IFwiS2VybmVsIHJlcXVpcmVzIGlucHV0XCI7XG4gICAgdGhpcy5taW5pRWRpdG9yID0gbmV3IFRleHRFZGl0b3Ioe1xuICAgICAgbWluaTogdHJ1ZSxcbiAgICB9KTtcbiAgICBpZiAoZGVmYXVsdFRleHQpIHtcbiAgICAgIHRoaXMubWluaUVkaXRvci5zZXRUZXh0KGRlZmF1bHRUZXh0KTtcbiAgICB9XG4gICAgdGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKGxhYmVsKTtcbiAgICB0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5taW5pRWRpdG9yLmVsZW1lbnQpO1xuXG4gICAgaWYgKGFsbG93Q2FuY2VsKSB7XG4gICAgICBhdG9tLmNvbW1hbmRzLmFkZCh0aGlzLmVsZW1lbnQsIHtcbiAgICAgICAgXCJjb3JlOmNvbmZpcm1cIjogKCkgPT4gdGhpcy5jb25maXJtKCksXG4gICAgICAgIFwiY29yZTpjYW5jZWxcIjogKCkgPT4gdGhpcy5jbG9zZSgpLFxuICAgICAgfSk7XG4gICAgICB0aGlzLm1pbmlFZGl0b3IuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiYmx1clwiLCAoKSA9PiB7XG4gICAgICAgIGlmIChkb2N1bWVudC5oYXNGb2N1cygpKSB7XG4gICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXRvbS5jb21tYW5kcy5hZGQodGhpcy5lbGVtZW50LCB7XG4gICAgICAgIFwiY29yZTpjb25maXJtXCI6ICgpID0+IHRoaXMuY29uZmlybSgpLFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgY29uZmlybSgpIHtcbiAgICBjb25zdCB0ZXh0ID0gdGhpcy5taW5pRWRpdG9yLmdldFRleHQoKTtcbiAgICBpZiAodGhpcy5vbkNvbmZpcm1lZCkge1xuICAgICAgdGhpcy5vbkNvbmZpcm1lZCh0ZXh0KTtcbiAgICB9XG4gICAgdGhpcy5jbG9zZSgpO1xuICB9XG5cbiAgY2xvc2UoKSB7XG4gICAgaWYgKHRoaXMucGFuZWwpIHtcbiAgICAgIHRoaXMucGFuZWwuZGVzdHJveSgpO1xuICAgIH1cbiAgICB0aGlzLnBhbmVsID0gbnVsbDtcbiAgICB0aGlzLmVsZW1lbnQucmVtb3ZlKCk7XG4gICAgaWYgKHRoaXMucHJldmlvdXNseUZvY3VzZWRFbGVtZW50KSB7XG4gICAgICB0aGlzLnByZXZpb3VzbHlGb2N1c2VkRWxlbWVudC5mb2N1cygpO1xuICAgIH1cbiAgfVxuXG4gIGF0dGFjaCgpIHtcbiAgICBzZXRQcmV2aW91c2x5Rm9jdXNlZEVsZW1lbnQodGhpcyk7XG4gICAgdGhpcy5wYW5lbCA9IGF0b20ud29ya3NwYWNlLmFkZE1vZGFsUGFuZWwoe1xuICAgICAgaXRlbTogdGhpcy5lbGVtZW50LFxuICAgIH0pO1xuICAgIHRoaXMubWluaUVkaXRvci5lbGVtZW50LmZvY3VzKCk7XG4gICAgdGhpcy5taW5pRWRpdG9yLnNjcm9sbFRvQ3Vyc29yUG9zaXRpb24oKTtcbiAgfVxufVxuIl19