"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertMarkdownToOutput = exports.clearResults = exports.clearResult = exports.importResult = exports.createResult = void 0;
const result_view_1 = __importDefault(require("./components/result-view"));
const output_area_1 = __importDefault(require("./panes/output-area"));
const watches_1 = __importDefault(require("./panes/watches"));
const utils_1 = require("./utils");
function createResult({ editor, kernel, markers, }, { code, row, cellType, }) {
    if (!editor || !kernel || !markers) {
        return;
    }
    if (atom.workspace.getActivePaneItem() instanceof watches_1.default) {
        kernel.watchesStore.run();
        return;
    }
    const globalOutputStore = atom.config.get("hydron.outputAreaDefault") ||
        atom.workspace.getPaneItems().find((item) => item instanceof output_area_1.default)
        ? kernel.outputStore
        : null;
    if (globalOutputStore) {
        (0, utils_1.openOrShowDock)(utils_1.OUTPUT_AREA_URI);
    }
    const { outputStore } = new result_view_1.default(markers, kernel, editor, row, !globalOutputStore || cellType == "markdown");
    if (code.search(/\S/) != -1) {
        switch (cellType) {
            case "markdown":
                if (globalOutputStore) {
                    globalOutputStore.appendOutput(convertMarkdownToOutput(code));
                }
                else {
                    outputStore.appendOutput(convertMarkdownToOutput(code));
                }
                outputStore.appendOutput({
                    data: "ok",
                    stream: "status",
                });
                break;
            case "codecell":
                kernel.execute(code, (result) => {
                    outputStore.appendOutput(result);
                    if (globalOutputStore) {
                        globalOutputStore.appendOutput(result);
                    }
                });
                break;
        }
    }
    else {
        outputStore.appendOutput({
            data: "ok",
            stream: "status",
        });
    }
}
exports.createResult = createResult;
function importResult({ editor, markers, }, { outputs, row, }) {
    if (!editor || !markers) {
        return;
    }
    const { outputStore } = new result_view_1.default(markers, null, editor, row, true);
    for (const output of outputs) {
        outputStore.appendOutput(output);
    }
}
exports.importResult = importResult;
function clearResult({ editor, markers, }) {
    if (!editor || !markers) {
        return;
    }
    const [startRow, endRow] = editor.getLastSelection().getBufferRowRange();
    for (let row = startRow; row <= endRow; row++) {
        markers.clearOnRow(row);
    }
}
exports.clearResult = clearResult;
function clearResults({ kernel, markers, }) {
    if (markers) {
        markers.clear();
    }
    if (!kernel) {
        return;
    }
    kernel.outputStore.clear();
}
exports.clearResults = clearResults;
function convertMarkdownToOutput(markdownString) {
    return {
        output_type: "display_data",
        data: {
            "text/markdown": markdownString,
        },
        metadata: {},
    };
}
exports.convertMarkdownToOutput = convertMarkdownToOutput;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzdWx0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vbGliL3Jlc3VsdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQSwyRUFBa0Q7QUFDbEQsc0VBQTZDO0FBQzdDLDhEQUEwQztBQUMxQyxtQ0FBMEQ7QUFpQjFELFNBQWdCLFlBQVksQ0FDMUIsRUFDRSxNQUFNLEVBQ04sTUFBTSxFQUNOLE9BQU8sR0FLUCxFQUNGLEVBQ0UsSUFBSSxFQUNKLEdBQUcsRUFDSCxRQUFRLEdBS1Q7SUFFRCxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsT0FBTyxFQUFFO1FBQ2xDLE9BQU87S0FDUjtJQUVELElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsRUFBRSxZQUFZLGlCQUFXLEVBQUU7UUFDN0QsTUFBTSxDQUFDLFlBQVksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUMxQixPQUFPO0tBQ1I7SUFFRCxNQUFNLGlCQUFpQixHQUNyQixJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyw0QkFBNEIsQ0FBQztRQUM3QyxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxZQUFZLHFCQUFVLENBQUM7UUFDdEUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxXQUFXO1FBQ3BCLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDWCxJQUFJLGlCQUFpQixFQUFFO1FBQ3JCLElBQUEsc0JBQWMsRUFBQyx1QkFBZSxDQUFDLENBQUM7S0FDakM7SUFDRCxNQUFNLEVBQUUsV0FBVyxFQUFFLEdBQUcsSUFBSSxxQkFBVSxDQUNwQyxPQUFPLEVBQ1AsTUFBTSxFQUNOLE1BQU0sRUFDTixHQUFHLEVBQ0gsQ0FBQyxpQkFBaUIsSUFBSSxRQUFRLElBQUksVUFBVSxDQUM3QyxDQUFDO0lBRUYsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFO1FBQzNCLFFBQVEsUUFBUSxFQUFFO1lBQ2hCLEtBQUssVUFBVTtnQkFDYixJQUFJLGlCQUFpQixFQUFFO29CQUNyQixpQkFBaUIsQ0FBQyxZQUFZLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztpQkFDL0Q7cUJBQU07b0JBQ0wsV0FBVyxDQUFDLFlBQVksQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO2lCQUN6RDtnQkFDRCxXQUFXLENBQUMsWUFBWSxDQUFDO29CQUN2QixJQUFJLEVBQUUsSUFBSTtvQkFDVixNQUFNLEVBQUUsUUFBUTtpQkFDakIsQ0FBQyxDQUFDO2dCQUNILE1BQU07WUFFUixLQUFLLFVBQVU7Z0JBQ2IsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxNQUFNLEVBQUUsRUFBRTtvQkFDOUIsV0FBVyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQztvQkFDakMsSUFBSSxpQkFBaUIsRUFBRTt3QkFDckIsaUJBQWlCLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO3FCQUN4QztnQkFDSCxDQUFDLENBQUMsQ0FBQztnQkFDSCxNQUFNO1NBQ1Q7S0FDRjtTQUFNO1FBQ0wsV0FBVyxDQUFDLFlBQVksQ0FBQztZQUN2QixJQUFJLEVBQUUsSUFBSTtZQUNWLE1BQU0sRUFBRSxRQUFRO1NBQ2pCLENBQUMsQ0FBQztLQUNKO0FBQ0gsQ0FBQztBQTFFRCxvQ0EwRUM7QUFZRCxTQUFnQixZQUFZLENBQzFCLEVBQ0UsTUFBTSxFQUNOLE9BQU8sR0FJUixFQUNELEVBQ0UsT0FBTyxFQUNQLEdBQUcsR0FJSjtJQUVELElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxPQUFPLEVBQUU7UUFDdkIsT0FBTztLQUNSO0lBQ0QsTUFBTSxFQUFFLFdBQVcsRUFBRSxHQUFHLElBQUkscUJBQVUsQ0FDcEMsT0FBTyxFQUNQLElBQUksRUFDSixNQUFNLEVBQ04sR0FBRyxFQUNILElBQUksQ0FDTCxDQUFDO0lBRUYsS0FBSyxNQUFNLE1BQU0sSUFBSSxPQUFPLEVBQUU7UUFDNUIsV0FBVyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQztLQUNsQztBQUNILENBQUM7QUE5QkQsb0NBOEJDO0FBY0QsU0FBZ0IsV0FBVyxDQUFDLEVBQzFCLE1BQU0sRUFDTixPQUFPLEdBSVA7SUFDQSxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsT0FBTyxFQUFFO1FBQ3ZCLE9BQU87S0FDUjtJQUNELE1BQU0sQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLGdCQUFnQixFQUFFLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztJQUV6RSxLQUFLLElBQUksR0FBRyxHQUFHLFFBQVEsRUFBRSxHQUFHLElBQUksTUFBTSxFQUFFLEdBQUcsRUFBRSxFQUFFO1FBQzdDLE9BQU8sQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDekI7QUFDSCxDQUFDO0FBZkQsa0NBZUM7QUFTRCxTQUFnQixZQUFZLENBQUMsRUFDM0IsTUFBTSxFQUNOLE9BQU8sR0FJUDtJQUNBLElBQUksT0FBTyxFQUFFO1FBQ1gsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO0tBQ2pCO0lBQ0QsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNYLE9BQU87S0FDUjtJQUNELE1BQU0sQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDN0IsQ0FBQztBQWRELG9DQWNDO0FBVUQsU0FBZ0IsdUJBQXVCLENBQUMsY0FBc0I7SUFDNUQsT0FBTztRQUNMLFdBQVcsRUFBRSxjQUFjO1FBQzNCLElBQUksRUFBRTtZQUNKLGVBQWUsRUFBRSxjQUFjO1NBQ2hDO1FBQ0QsUUFBUSxFQUFFLEVBQUU7S0FDYixDQUFDO0FBQ0osQ0FBQztBQVJELDBEQVFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGV4dEVkaXRvciB9IGZyb20gXCJhdG9tXCI7XG5pbXBvcnQgUmVzdWx0VmlldyBmcm9tIFwiLi9jb21wb25lbnRzL3Jlc3VsdC12aWV3XCI7XG5pbXBvcnQgT3V0cHV0UGFuZSBmcm9tIFwiLi9wYW5lcy9vdXRwdXQtYXJlYVwiO1xuaW1wb3J0IFdhdGNoZXNQYW5lIGZyb20gXCIuL3BhbmVzL3dhdGNoZXNcIjtcbmltcG9ydCB7IE9VVFBVVF9BUkVBX1VSSSwgb3Blbk9yU2hvd0RvY2sgfSBmcm9tIFwiLi91dGlsc1wiO1xuaW1wb3J0IHR5cGUgTWFya2VyU3RvcmUgZnJvbSBcIi4vc3RvcmUvbWFya2Vyc1wiO1xuaW1wb3J0IHR5cGUgS2VybmVsIGZyb20gXCIuL2tlcm5lbFwiO1xuaW1wb3J0IHR5cGUgeyBIeWRyb2dlbkNlbGxUeXBlIH0gZnJvbSBcIi4vaHlkcm9nZW5cIjtcblxuLyoqXG4gKiBDcmVhdGVzIGFuZCByZW5kZXJzIGEgUmVzdWx0Vmlldy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gc3RvcmUgLSBHbG9iYWwgSHlkcm9nZW4gU3RvcmVcbiAqIEBwYXJhbSB7VGV4dEVkaXRvcn0gc3RvcmUuZWRpdG9yIC0gVGV4dEVkaXRvciBhc3NvY2lhdGVkIHdpdGggdGhlIHJlc3VsdC5cbiAqIEBwYXJhbSB7S2VybmVsfSBzdG9yZS5rZXJuZWwgLSBLZXJuZWwgdG8gcnVuIGNvZGUgYW5kIGFzc29jaWF0ZSB3aXRoIHRoZSByZXN1bHQuXG4gKiBAcGFyYW0ge01hcmtlclN0b3JlfSBzdG9yZS5tYXJrZXJzIC0gTWFya2VyU3RvcmUgdGhhdCBiZWxvbmdzIHRvIGBzdG9yZS5lZGl0b3JgLlxuICogQHBhcmFtIHtPYmplY3R9IGNvZGVCbG9jayAtIEEgSHlkcm9nZW4gQ2VsbC5cbiAqIEBwYXJhbSB7U3RyaW5nfSBjb2RlQmxvY2suY29kZSAtIFNvdXJjZSBzdHJpbmcgb2YgdGhlIGNlbGwuXG4gKiBAcGFyYW0ge051bWJlcn0gY29kZUJsb2NrLnJvdyAtIFJvdyB0byBkaXNwbGF5IHRoZSByZXN1bHQgb24uXG4gKiBAcGFyYW0ge0h5ZHJvZ2VuQ2VsbFR5cGV9IGNvZGVCbG9jay5jZWxsVHlwZSAtIENlbGwgdHlwZSBvZiB0aGUgY2VsbC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVJlc3VsdChcbiAge1xuICAgIGVkaXRvcixcbiAgICBrZXJuZWwsXG4gICAgbWFya2VycyxcbiAgfTogUmVhZG9ubHk8e1xuICAgIGVkaXRvcjogVGV4dEVkaXRvciB8IG51bGwgfCB1bmRlZmluZWQ7XG4gICAga2VybmVsOiBLZXJuZWwgfCBudWxsIHwgdW5kZWZpbmVkO1xuICAgIG1hcmtlcnM6IE1hcmtlclN0b3JlIHwgbnVsbCB8IHVuZGVmaW5lZDtcbiAgfT4sXG4gIHtcbiAgICBjb2RlLFxuICAgIHJvdyxcbiAgICBjZWxsVHlwZSxcbiAgfToge1xuICAgIGNvZGU6IHN0cmluZztcbiAgICByb3c6IG51bWJlcjtcbiAgICBjZWxsVHlwZTogSHlkcm9nZW5DZWxsVHlwZTtcbiAgfVxuKSB7XG4gIGlmICghZWRpdG9yIHx8ICFrZXJuZWwgfHwgIW1hcmtlcnMpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoYXRvbS53b3Jrc3BhY2UuZ2V0QWN0aXZlUGFuZUl0ZW0oKSBpbnN0YW5jZW9mIFdhdGNoZXNQYW5lKSB7XG4gICAga2VybmVsLndhdGNoZXNTdG9yZS5ydW4oKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBnbG9iYWxPdXRwdXRTdG9yZSA9XG4gICAgYXRvbS5jb25maWcuZ2V0KFwiSHlkcm9nZW4ub3V0cHV0QXJlYURlZmF1bHRcIikgfHxcbiAgICBhdG9tLndvcmtzcGFjZS5nZXRQYW5lSXRlbXMoKS5maW5kKChpdGVtKSA9PiBpdGVtIGluc3RhbmNlb2YgT3V0cHV0UGFuZSlcbiAgICAgID8ga2VybmVsLm91dHB1dFN0b3JlXG4gICAgICA6IG51bGw7XG4gIGlmIChnbG9iYWxPdXRwdXRTdG9yZSkge1xuICAgIG9wZW5PclNob3dEb2NrKE9VVFBVVF9BUkVBX1VSSSk7XG4gIH1cbiAgY29uc3QgeyBvdXRwdXRTdG9yZSB9ID0gbmV3IFJlc3VsdFZpZXcoXG4gICAgbWFya2VycyxcbiAgICBrZXJuZWwsXG4gICAgZWRpdG9yLFxuICAgIHJvdyxcbiAgICAhZ2xvYmFsT3V0cHV0U3RvcmUgfHwgY2VsbFR5cGUgPT0gXCJtYXJrZG93blwiXG4gICk7XG5cbiAgaWYgKGNvZGUuc2VhcmNoKC9cXFMvKSAhPSAtMSkge1xuICAgIHN3aXRjaCAoY2VsbFR5cGUpIHtcbiAgICAgIGNhc2UgXCJtYXJrZG93blwiOlxuICAgICAgICBpZiAoZ2xvYmFsT3V0cHV0U3RvcmUpIHtcbiAgICAgICAgICBnbG9iYWxPdXRwdXRTdG9yZS5hcHBlbmRPdXRwdXQoY29udmVydE1hcmtkb3duVG9PdXRwdXQoY29kZSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG91dHB1dFN0b3JlLmFwcGVuZE91dHB1dChjb252ZXJ0TWFya2Rvd25Ub091dHB1dChjb2RlKSk7XG4gICAgICAgIH1cbiAgICAgICAgb3V0cHV0U3RvcmUuYXBwZW5kT3V0cHV0KHtcbiAgICAgICAgICBkYXRhOiBcIm9rXCIsXG4gICAgICAgICAgc3RyZWFtOiBcInN0YXR1c1wiLFxuICAgICAgICB9KTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgXCJjb2RlY2VsbFwiOlxuICAgICAgICBrZXJuZWwuZXhlY3V0ZShjb2RlLCAocmVzdWx0KSA9PiB7XG4gICAgICAgICAgb3V0cHV0U3RvcmUuYXBwZW5kT3V0cHV0KHJlc3VsdCk7XG4gICAgICAgICAgaWYgKGdsb2JhbE91dHB1dFN0b3JlKSB7XG4gICAgICAgICAgICBnbG9iYWxPdXRwdXRTdG9yZS5hcHBlbmRPdXRwdXQocmVzdWx0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgb3V0cHV0U3RvcmUuYXBwZW5kT3V0cHV0KHtcbiAgICAgIGRhdGE6IFwib2tcIixcbiAgICAgIHN0cmVhbTogXCJzdGF0dXNcIixcbiAgICB9KTtcbiAgfVxufVxuXG4vKipcbiAqIENyZWF0ZXMgaW5saW5lIHJlc3VsdHMgZnJvbSBLZXJuZWwgUmVzcG9uc2VzIHdpdGhvdXQgYSB0aWUgdG8gYSBrZXJuZWwuXG4gKlxuICogQHBhcmFtIHtTdG9yZX0gc3RvcmUgLSBIeWRyb2dlbiBzdG9yZVxuICogQHBhcmFtIHtUZXh0RWRpdG9yfSBzdG9yZS5lZGl0b3IgLSBUaGUgZWRpdG9yIHRvIGRpc3BsYXkgdGhlIHJlc3VsdHMgaW4uXG4gKiBAcGFyYW0ge01hcmtlclN0b3JlfSBzdG9yZS5tYXJrZXJzIC0gU2hvdWxkIGFsbW9zdCBhbHdheXMgYmUgdGhlIGVkaXRvcidzIGBNYXJrZXJTdG9yZWBcbiAqIEBwYXJhbSB7T2JqZWN0fSBidW5kbGUgLSBUaGUgYnVuZGxlIHRvIGRpc3BsYXkuXG4gKiBAcGFyYW0ge09iamVjdFtdfSBidW5kbGUub3V0cHV0cyAtIFRoZSBLZXJuZWwgUmVzcG9uc2VzIHRvIGRpc3BsYXkuXG4gKiBAcGFyYW0ge051bWJlcn0gYnVuZGxlLnJvdyAtIFRoZSBlZGl0b3Igcm93IHRvIGRpc3BsYXkgdGhlIHJlc3VsdHMgb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbXBvcnRSZXN1bHQoXG4gIHtcbiAgICBlZGl0b3IsXG4gICAgbWFya2VycyxcbiAgfToge1xuICAgIGVkaXRvcjogVGV4dEVkaXRvciB8IG51bGwgfCB1bmRlZmluZWQ7XG4gICAgbWFya2VyczogTWFya2VyU3RvcmUgfCBudWxsIHwgdW5kZWZpbmVkO1xuICB9LFxuICB7XG4gICAgb3V0cHV0cyxcbiAgICByb3csXG4gIH06IHtcbiAgICBvdXRwdXRzOiBBcnJheTxSZWNvcmQ8c3RyaW5nLCBhbnk+PjtcbiAgICByb3c6IG51bWJlcjtcbiAgfVxuKSB7XG4gIGlmICghZWRpdG9yIHx8ICFtYXJrZXJzKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHsgb3V0cHV0U3RvcmUgfSA9IG5ldyBSZXN1bHRWaWV3KFxuICAgIG1hcmtlcnMsXG4gICAgbnVsbCxcbiAgICBlZGl0b3IsXG4gICAgcm93LFxuICAgIHRydWUgLy8gQWx3YXlzIHNob3cgaW5saW5lXG4gICk7XG5cbiAgZm9yIChjb25zdCBvdXRwdXQgb2Ygb3V0cHV0cykge1xuICAgIG91dHB1dFN0b3JlLmFwcGVuZE91dHB1dChvdXRwdXQpO1xuICB9XG59XG5cbi8qKlxuICogQ2xlYXJzIGEgUmVzdWx0VmlldyBvciBzZWxlY3Rpb24gb2YgUmVzdWx0Vmlld3MuIFRvIHNlbGVjdCBhIHJlc3VsdCB0byBjbGVhcixcbiAqIHB1dCB5b3VyIGN1cnNvciBvbiB0aGUgcm93IG9uIHRoZSBSZXN1bHRWaWV3LiBUbyBzZWxlY3QgbXVsdGlwbGUgUmVzdWx0Vmlld3MsXG4gKiBzZWxlY3QgdGV4dCBzdGFydGluZyBvbiB0aGUgcm93IG9mIHRoZSBmaXJzdCBSZXN1bHRWaWV3IHRvIHJlbW92ZSBhbGwgdGhlIHdheVxuICogdG8gdGV4dCBvbiB0aGUgcm93IG9mIHRoZSBsYXN0IFJlc3VsdFZpZXcgdG8gcmVtb3ZlLiBfVGhpcyBtdXN0IGJlIG9uZVxuICogc2VsZWN0aW9uIGFuZCB0aGUgbGFzdCBzZWxlY3Rpb24gbWFkZV9cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gc3RvcmUgLSBHbG9iYWwgSHlkcm9nZW4gU3RvcmVcbiAqIEBwYXJhbSB7VGV4dEVkaXRvcn0gc3RvcmUuZWRpdG9yIC0gVGV4dEVkaXRvciBhc3NvY2lhdGVkIHdpdGggdGhlIFJlc3VsdFZpZXcuXG4gKiBAcGFyYW0ge01hcmtlclN0b3JlfSBzdG9yZS5tYXJrZXJzIC0gTWFya2VyU3RvcmUgdGhhdCBiZWxvbmdzIHRvXG4gKiAgIGBzdG9yZS5lZGl0b3JgIGFuZCB0aGUgUmVzdWx0Vmlldy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNsZWFyUmVzdWx0KHtcbiAgZWRpdG9yLFxuICBtYXJrZXJzLFxufTogUmVhZG9ubHk8e1xuICBlZGl0b3I6IFRleHRFZGl0b3IgfCBudWxsIHwgdW5kZWZpbmVkO1xuICBtYXJrZXJzOiBNYXJrZXJTdG9yZSB8IG51bGwgfCB1bmRlZmluZWQ7XG59Pikge1xuICBpZiAoIWVkaXRvciB8fCAhbWFya2Vycykge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBbc3RhcnRSb3csIGVuZFJvd10gPSBlZGl0b3IuZ2V0TGFzdFNlbGVjdGlvbigpLmdldEJ1ZmZlclJvd1JhbmdlKCk7XG5cbiAgZm9yIChsZXQgcm93ID0gc3RhcnRSb3c7IHJvdyA8PSBlbmRSb3c7IHJvdysrKSB7XG4gICAgbWFya2Vycy5jbGVhck9uUm93KHJvdyk7XG4gIH1cbn1cblxuLyoqXG4gKiBDbGVhcnMgYWxsIFJlc3VsdFZpZXdzIG9mIGEgTWFya2VyU3RvcmUuIEl0IGFsc28gY2xlYXJzIHRoZSBjdXJyZWN0IGtlcm5lbCByZXN1bHRzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBzdG9yZSAtIEdsb2JhbCBIeWRyb2dlbiBTdG9yZVxuICogQHBhcmFtIHtLZXJuZWx9IHN0b3JlLmtlcm5lbCAtIEtlcm5lbCB0byBjbGVhciBvdXRwdXRzLlxuICogQHBhcmFtIHtNYXJrZXJTdG9yZX0gc3RvcmUubWFya2VycyAtIE1hcmtlclN0b3JlIHRvIGNsZWFyLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY2xlYXJSZXN1bHRzKHtcbiAga2VybmVsLFxuICBtYXJrZXJzLFxufTogUmVhZG9ubHk8e1xuICBrZXJuZWw6IEtlcm5lbCB8IG51bGwgfCB1bmRlZmluZWQ7XG4gIG1hcmtlcnM6IE1hcmtlclN0b3JlIHwgbnVsbCB8IHVuZGVmaW5lZDtcbn0+KSB7XG4gIGlmIChtYXJrZXJzKSB7XG4gICAgbWFya2Vycy5jbGVhcigpO1xuICB9XG4gIGlmICgha2VybmVsKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGtlcm5lbC5vdXRwdXRTdG9yZS5jbGVhcigpO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgc3RyaW5nIG9mIHJhdyBtYXJrZG93biB0byBhIGRpc3BsYXlfZGF0YSBLZXJuZWwgUmVzcG9uc2UuIFRoaXNcbiAqIGFsbG93cyBmb3IgaHlkcm9nZW4gdG8gZGlzcGxheSBtYXJrZG93biB0ZXh0IGFzIGlmIGlzIHdhcyBhbnkgbm9ybWFsIHJlc3VsdFxuICogdGhhdCBjYW1lIGJhY2sgZnJvbSB0aGUga2VybmVsLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtYXJrZG93blN0cmluZyAtIEEgc3RyaW5nIG9mIHJhdyBtYXJrZG93biBjb2RlLlxuICogQHJldHVybnMge09iamVjdH0gQSBmYWtlIGRpc3BsYXlfZGF0YSBLZXJuZWwgUmVzcG9uc2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0TWFya2Rvd25Ub091dHB1dChtYXJrZG93blN0cmluZzogc3RyaW5nKSB7XG4gIHJldHVybiB7XG4gICAgb3V0cHV0X3R5cGU6IFwiZGlzcGxheV9kYXRhXCIsXG4gICAgZGF0YToge1xuICAgICAgXCJ0ZXh0L21hcmtkb3duXCI6IG1hcmtkb3duU3RyaW5nLFxuICAgIH0sXG4gICAgbWV0YWRhdGE6IHt9LFxuICB9O1xufVxuIl19